go has 2 packages that perform automated testing.

testing
testing/httptest

the testing package is used with the "go test" command. each go source file
should have an associated _test.go file that contains all the tests you want to
run on the go source file. for example, if you have app.go, you should also have
app_test.go. in the app_test.go file you create functions in the format:

func TestXxx(*testing.T) { }

where Xxx is an alphanumeric string with the first letter capitalized.

example:

$ cat dog.go package main

import (
  "fmt"
)

func bark() string {
  return "woof"
}

func main() {
  fmt.Printf("the dog says %s!\n", bark())
}

$ cat dog_test.go
package main

import (
  "fmt"
  "testing"
)

func TestBark(t *testing.T) {
  bark := bark() if bark != "woof" {
    t.Error(fmt.Sprintf("test failed. expected 'woof', got %s", bark))
  }
}

$ go test PASS ok      demo    0.004s

now modify the bark() function to return something other than "woof":

$ cat dog.go
package main

import (
  "fmt"
)

func bark() string {
  return "meow"
}

func main() {
  fmt.Printf("the dog says %s!\n", bark())
}

$ go test --- FAIL: TestBark (0.00s)
    dog_test.go:11: test failed. expected 'woof', got meow
FAIL exit status 1 FAIL    demo    0.004s

use the -v and -cover options to get more verbose output and percent code coverage:

$ go test -v -cover
=== RUN   TestBark
--- FAIL: TestBark (0.00s)
    dog_test.go:11: test failed. expected 'woof', got meow
FAIL
coverage: 50.0% of statements
exit status 1
FAIL	demo	0.004s

you can also benchmark code using:

func BenchmarkXxx(*testing.B) { }

$ cat dog_test.go 
package main

import (
  "fmt"
  "testing"
)

func TestBark(t *testing.T) {
  bark := bark()
  if bark != "woof" {
    t.Error(fmt.Sprintf("test failed. expected 'woof', got %s", bark))
  }
}

func BenchmarkBark(b *testing.B) {
  for i := 0; i < b.N; i++ {
    bark()
  }
}

$ go test -bench .
goos: darwin
goarch: amd64
pkg: demo
BenchmarkBark-4   	2000000000	         0.41 ns/op
PASS
ok  	demo	0.870s

